********************************************************************************
FILE:			example-explanation.txt

DATE:			January 23, 2025

DESCRIPTION:	A short discussion of the SIM example programs.

AUTHOR:         John Collins
********************************************************************************

General
=======

The example program's aim is to demonstrate as much of SIM's abilities as
possible within a simple framework. The most straightforward arrangement is a
pure receiver which receives messages from a single pure sender. We use the word
'pure' here to mean that the receiver only receives and replies, it does not
send as well. The same can be said for the sender, it merely sends and only one kind of message to that receiver.

Receiver
========

The receiver is a C++ program that receives only one kind of message and only
from one sender program. The message is tokenized. That is, the beginning of the
message dictates the action to be taken by the receiver program. The possible
actions are Draw, Play, Clear the screen, Save the screen to a bitmap in /var/tmp and to Quit the program.

The 'Draw' action tells the receiver to draw a particular image on the screen. The balance of the message contains information regarding the type of image to draw.

The 'Play' action allows the sender to experiment with the fractals by varying
the message components sent to the receiver for display.

The images are fractal in nature. The graphics are run through the X-windows X
library (xlib). The reason for this is speed. The colour for each screen pixel
must be calculated and then drawn. In older computers this process could take a
very long time. With modern hardware and software this process can be done much
more quickly. The final images can be pleasing to the eye.

The receiver receives the message and immediately replies a NULL message; that is, a message of no content in order to unblock the sender.

The receiver executable is called fractals. The source file is called
fractals.cpp.

Sender
======

The sending program was written in Python version 3. It provides a simple GUI
for setting the message parameters that will be sent to the receiver. The fact
that it is written in Python enables an example of SIM between two programs
written in two different languages. The Python sender program uses Tk to 
generate a number on menus by which the users can select their choices. When
the choices have been made a message will be sent to the receiver.

The sender program is called fractals.py and is invoked via the Python 3
interpreter.

Running the Example
===================

In order to run the example (> is the command line prompt):

1. run the receiver from a GUI console command line: >fractals
2. run the sender from another GUI console: >python3 fractals.py
3. switch back to the receiver's GUI console to see the results.

C++ message structure FRACTAL_MSG
=================================

The message structure that is sent by the sender to the receiver is as follows:

ACTION_TYPE actionType
PRIMARY_FRACTAL_TYPE primaryFractalType
SECONDARY_FRACTAL_TYPE secondaryFractalType
unsigned maxColumns
unsigned maxRows
unsigned maxIters
double divergence
double XMax
double YMax
double XMin
double YMin
double P
double Q
unsigned maxColours
unsigned colourIndex[MAX_COLOURS]
char name[80]

Default Messages
================

These are the default message values sent from the fractals.py program to the
fractals.cpp program.

// mandelbrot values
DRAW
MANDELBROT
NA
maxColumns = 1000
maxRows = 650
maxIters = 512
divergence = 4.0
XMax = 1.2
YMax = 1.2
XMin = -2.0
YMin = -1.2
P = -2.0
Q = 1.0
maxColours = 16 // length of colour index
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// julia values
DRAW
JULIA
NA
maxColumns = 1000
maxRows = 800
maxIters = 96
divergence = 4.0
XMax = 1.8
YMax = 1.2
XMin = -1.8
YMin = -1.2
P = -0.743036
Q = 0.113467
maxColours = 7
colourIndex = [13,8,2,3,4,5,6]
name = ""

// cosine values
DRAW
TRIG
COS
maxColumns = 1000
maxRows = 800
maxIters = 64
divergence = 1000.0
XMax = 5.0
YMax = 8.0
XMin = -7.0
YMin = -8.0
P = 0.0;// set in prog
Q = 0.0;// set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// sine values
DRAW
TRIG
SIN
maxColumns = 1000
maxRows = 800
maxIters = 64
divergence = 1000.0
XMax = 5.0
YMax = 8.0
XMin = -7.0
YMin = -8.0
P = 0.0;// set in prog
Q = 0.0;// set in prog
maxColours = 16;
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// hyperbolic cosine values
DRAW
TRIG
COSH
maxColumns = 1000
maxRows = 800
maxIters = 64
divergence = 1000.0
XMax = 5.0
YMax = 8.0
XMin = -7.0
YMin = -8.0
P = 0.0;// set in prog
Q = 0.0;// set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// hyperbolic sine values
DRAW
TRIG
SINH
maxColumns = 1000
maxRows = 800
maxIters = 64
divergence = 1000.0
XMax = 5.0
YMax = 8.0
XMin = -7.0
YMin = -8.0
P = 0.0;// set in prog
Q = 0.0;// set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// exponential values
DRAW
TRIG
EXP
maxColumns = 1000
maxRows = 800
maxIters = 64
divergence = 1000.0
XMax = 2.0
YMax = 1.0
XMin = 0.5
YMin = -1.0
P = 0.0;// set in prog
Q = 0.0;// set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// legendre values
DRAW
LEGENDRE
NA
maxColumns = 1200
maxRows = 700
maxIters = 64
divergence = 1000.0
XMax = 0.6
YMax = 0.4
XMin = -0.6
YMin = -0.4
P = 0.0 // set in prog
Q = 0.0 // set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// laguerre values
DRAW
LAGUERRE
NA
maxColumns = 1200
maxRows = 700
maxIters = 64
divergence = 1000.0
XMax = 4.0
YMax = 1.4
XMin = 0.25
YMin = -1.4
P = 0.0 // set in prog
Q = 0.0 // set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// dragon values
DRAW
DRAGON
NA
maxColumns = 1200
maxRows = 700
maxIters = 256
divergence = 4.0
XMax = 1.4
YMax = 0.8
XMin = -0.4
YMin = -0.8
P = 1.646009
Q = 0.967049
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// tchebychev values
DRAW
TCHEBYCHEV
NA
maxColumns = 1200
maxRows = 700
maxIters = 64
divergence = 100000.0
XMax = 1.6
YMax = 0.75
XMin = -1.6
YMin = -0.75
P = 0.0 // set in prog
Q = 0.0 // set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// barnsley values
DRAW
BARNSLEY
NA
maxColumns = 1300
maxRows = 700
maxIters = 64
divergence = 4.0
XMax = 1.7
YMax = 1.03
XMin = -2.1
YMin = -1.03
P = 1.0
Q = 0.0
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// sierpinski values
DRAW
SIERPINSKI
NA
maxColumns = 900
maxRows = 700
maxIters = 64
divergence = 64.0
XMax = 1.3
YMax = 1.22
XMin = -0.5
YMin = -0.22
P = 0.0 // set in prog
Q = 0.0 // set in prog
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

// phoenix values
DRAW
PHOENIX
NA
maxColumns = 1000
maxRows = 650
maxIters = 64
divergence = 4.0
XMax = 1.5
YMax = 1.2
XMin = -1.5
YMin = -0.7
P = 0.56667
Q = -0.5
maxColours = 16
colourIndex = [13,1,2,3,4,5,6,7,8,9,10,11,12,0,14,15]
name = ""

Sender and Receiver Development
===============================

There are two more sender programs: sender.py and sender.cpp. These two programs are clearly written in Python and C++ repectively. Both send a canned message to the the receiver fractals.cpp. As such, they are much simplified versions of the sender fractals.py. This allowed for cross-testing various attributes of SIM and simplified senders for the more complicated development of the receiver fractals.cpp. Once satisfied that the receiver fractals.cpp was basically functional, final development of the sender fractals.py could be undertaken.

Properties of Mandelbrot Set
============================

1. The Mandelbrot set is a connected set since it always has a path from one
point of the set to another point of the set so that all the points in the path
are also in the set.

2. The Mandelbrot Set has a finite area but infinite length of border.

3. The Mandelbrot set is symmetric with respect to the real axis. This means
if a complex number belongs to the set then its conjugate will also belong to
that set.

4. The Mandelbrot set is bounded.

5. The Mandelbrot set is itself similar in a non exact sense.

6. The border of the Mandelbrot set is a fractal structure with not yet known
fractal dimension.

Implementation
==============

Since the concept of Fractals involves the mathematical properties of
equations, the algorithm and the programs that create fractals are difficult to
write and optimize. One can find many commercial softwares that create fractals.
These programs represent some of the most optimized and probably the best
fractal algorithms and implementations that have been created.

The Approach
============

For drawing Mandelbrot set, set the pixel that is a complex number. Colour the
pixel if it belongs to the set. Iterate through every pixel and calculate the
corresponding complex numbers whose result is saved in c_real for real part and
c_imaginary for imaginary part. Calculate the Mandelbrot function which is
defined as z = z*z + c where z and c are complex numbers. Since complex
multiplication is difficult, break the equation and calculate the sub parts
i.e. the real and the imaginary part separately. As square of a complex number
(a + ib)2 = a2 – b2 + 2abi, where a2 -b2 is the real part and 2abi is imaginary
part. While calculating z, calculate them separately, i.e,

    Z_real = z_real*z_real – z_imaginary*z_imaginary + c_real
    Z_imaginary = 2*z_real*z_imaginary + c_imaginary

Continue to calculate these values for each pixel until we reach the maximum
iterations and the absolute value of z is not less than 2. Finally, we colour
the pixel.
